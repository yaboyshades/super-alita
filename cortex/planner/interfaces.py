from __future__ import annotations
from typing import Protocol, Any, Dict, Optional


class KG(Protocol):
    def get_context_for_title(self, title: str) -> str: ...
    def compute_energy_for_title(self, title: str) -> float: ...
    def write_decision(self, tool: str, node_id: str, reward: float) -> None: ...
    def estimate_metric_delta(self, title: str) -> float: ...


class Bandit(Protocol):
    def select_tool(self, context: Optional[Dict[str, Any]] = None) -> str: ...
    def update(self, tool: str, reward: float) -> None: ...


class EventBus(Protocol):
    async def emit(self, kind: str, **kwargs) -> None: ...
    def emit_sync(self, kind: str, **kwargs) -> None: ...


class Orchestrator(Protocol):
    event_bus: EventBus
    async def execute_action(self, tool: str, todo: Any, context: str, shadow: bool = True) -> str: ...


class TodoStore(Protocol):
    def upsert(self, t: Any) -> None: ...
    def get(self, todo_id: str) -> Any: ...
    def children_of(self, todo_id: str): ...
