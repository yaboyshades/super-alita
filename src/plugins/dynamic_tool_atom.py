import asyncio
import logging

from src.core.events import ToolResultEvent

logger = logging.getLogger(__name__)


async def dynamic_tool(
    event_bus=None, tool_call_id="", session_id="", conversation_id="", **kwargs
):
    """
    Create a tool for: show me you created it

    Auto-generated tool that publishes results via event bus.
    Generated by CREATOR Plugin with guaranteed event contract.
    """
    result = dict()
    success = False

    try:
        # Create a tool for: show me you created it
        # Generic tool logic
        value = kwargs.get("input", "completed")
        if isinstance(value, str):
            result = {
                "value": value,
                "status": "completed",
                "description": f"Processed: {value}",
            }
        else:
            result = {
                "value": str(value),
                "status": "completed",
                "type": type(value).__name__,
            }
        success = True
        logger.info("dynamic_tool executed successfully")

    except Exception as e:
        logger.exception("dynamic_tool execution failed")
        result = {"error": str(e)}
        success = False

    # Always emit ToolResultEvent if event_bus is available
    if event_bus and hasattr(event_bus, "publish"):
        try:
            tool_result = ToolResultEvent(
                source_plugin="dynamic_tool",
                tool_call_id=tool_call_id,
                session_id=session_id,
                conversation_id=conversation_id,
                success=success,
                result=result,
            )

            # Handle async event publishing
            if asyncio.iscoroutinefunction(event_bus.publish):
                await event_bus.publish(tool_result)
            else:
                # Sync publishing fallback
                event_bus.publish(tool_result)

            logger.debug("dynamic_tool result event published")

        except Exception as e:
            logger.error(f"dynamic_tool failed to publish result event: {e!s}")

    return result
