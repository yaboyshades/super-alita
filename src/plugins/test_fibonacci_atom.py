import asyncio
import logging

from src.core.events import ToolResultEvent

logger = logging.getLogger(__name__)


async def test_fibonacci(
    event_bus=None, tool_call_id="", session_id="", conversation_id="", **kwargs
):
    """
    Calculate fibonacci numbers

    Auto-generated tool that publishes results via event bus.
    Generated by CREATOR Plugin with guaranteed event contract.
    """
    result = dict()
    success = False

    try:
        # Calculate fibonacci numbers
        # Core logic here - replace with actual implementation
        value = "detailed_plan_result"  # replace with real logic
        result = {"plan": value, "description": "Calculate fibonacci numbers"}
        success = True
        logger.info("test_fibonacci executed successfully")

    except Exception as e:
        logger.exception("test_fibonacci execution failed")
        result = {"error": str(e)}
        success = False

    # Always emit ToolResultEvent if event_bus is available
    if event_bus and hasattr(event_bus, "publish"):
        try:
            tool_result = ToolResultEvent(
                source_plugin="test_fibonacci",
                tool_call_id=tool_call_id,
                session_id=session_id,
                conversation_id=conversation_id,
                success=success,
                result=result,
            )

            # Handle async event publishing
            if asyncio.iscoroutinefunction(event_bus.publish):
                await event_bus.publish(tool_result)
            else:
                # Sync publishing fallback
                event_bus.publish(tool_result)

            logger.debug("test_fibonacci result event published")

        except Exception as e:
            logger.error(f"test_fibonacci failed to publish result event: {e!s}")

    return result
