import asyncio
import uuid

from src.core.events import ToolResultEvent


def debug_test_tool(**kwargs):
    """
    Test tool for complete flow debugging

    Auto-generated tool that publishes results via event bus.
    Generated by CREATOR Plugin with guaranteed event contract.
    """
    result = {}
    success = False

    try:
        # Test tool for complete flow debugging
        # Simple UUID generation as reliable default functionality
        value = str(uuid.uuid4())
        result = {"uuid": value, "description": "Test tool for complete flow debugging"}
        success = True

    except Exception as e:
        result = {"error": str(e)}
        success = False

    # Emit ToolResultEvent if event_bus is available
    event_bus = kwargs.get("event_bus")
    if event_bus:
        try:
            tool_result = ToolResultEvent(
                source_plugin="debug_test_tool",
                tool_call_id=kwargs.get("tool_call_id", ""),
                session_id=kwargs.get("session_id", ""),
                conversation_id=kwargs.get("conversation_id", ""),
                success=success,
                result=result,
            )

            # Handle async event publishing
            if hasattr(event_bus, "publish"):
                if asyncio.iscoroutinefunction(event_bus.publish):
                    # Create task for async publishing
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        asyncio.create_task(event_bus.publish(tool_result))
                else:
                    # Sync publishing
                    event_bus.publish(tool_result)
        except Exception:
            pass  # Silently fail if event publishing fails

    return result
